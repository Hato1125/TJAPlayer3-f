name: build

on: 
  push:
    branches: 
      - master
    tags:
      - "Ver.*"

jobs:
  get_rev_list_count:
    name: Get rev-list_count
    runs-on: ubuntu-latest
    outputs:
      rev_list_count: ${{ steps.rev.outputs.REV_LIST_COUNT }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set REV_LIST_COUNT
      id: rev
      run: |
        cd ${{ github.workspace }}
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
    
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: get_rev_list_count
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      upload_url2: ${{ steps.create_release2.outputs.upload_url }}
    steps:
    - name: Create a Release(Pre)
      if: (startsWith(github.ref, 'refs/tags/Ver')) != true
      id: create_release
      uses: actions/create-release@v1
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: prerelease-${{ needs.get_rev_list_count.outputs.rev_list_count }}
        release_name: TJAPlayer3-f-prerelease-${{ needs.get_rev_list_count.outputs.rev_list_count }}
        draft: false
        prerelease: true
    - name: Create a Release
      if: (startsWith(github.ref, 'refs/tags/Ver'))
      id: create_release2
      uses: actions/create-release@v1
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
     
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [create_release,get_rev_list_count]
    strategy:
      matrix:
        platform: [win-x86, win-x64, linux-x64, linux-arm, linux-arm64, osx-x64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
    - name: Build
      run: dotnet publish TJAPlayer3-f -o publish -r ${{matrix.platform}} -p:MyOption=PUBLISH -p:PublishSingleFile=true --configuration Release --self-contained true

    - name: Remove Folder
      run: |
        cd ${{ github.workspace }}/publish/Libs
        for filename in *
        do
          if [ ${filename} != ${{matrix.platform}} ] ; then
            rm -rf ${filename}
            echo ${filename}
          fi
        done
        
    - name: Rename App File (linux)
      if: startsWith(matrix.platform, 'linux')
      run: |
        cd ${{ github.workspace }}
        mv "publish/TJAPlayer3-f" "publish/TJAPlayer3-f.AppImage"
        
    - name: Create Archive
      run: |
        cd ${{ github.workspace }}
        zip TJAPlayer3-f-Release -r publish
    
    #Push
    - name: Upload Release Asset(Pre)
      if: (startsWith(github.ref, 'refs/tags/Ver')) != true
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./TJAPlayer3-f-Release.zip
        asset_name: TJAPlayer3-f-PreRelease-${{matrix.platform}}-${{ needs.get_rev_list_count.outputs.rev_list_count }}.zip
        asset_content_type: application/zip

    #Release
    - name: Upload Release Asset
      if: (startsWith(github.ref, 'refs/tags/Ver'))
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url2 }}
        asset_path: ./TJAPlayer3-f-Release.zip
        asset_name: TJAPlayer3-f-${{matrix.platform}}-${{ github.ref }}.zip
        asset_content_type: application/zip
